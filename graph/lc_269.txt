There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.
-----------------------------------------
class Solution {
    public String alienOrder(String[] words) {
        int[] visited = new int[26];
        boolean adj[][] = new boolean[26][26];
        StringBuilder sb = new StringBuilder();
        buildGraph(visited,words,adj);
        for(int i=0;i<26;i++){
            if(visited[i]==0){
                if(!dfs(sb,visited,i,adj)){
                    return "";
                }
            }
        }
        return sb.reverse().toString();
    }
    
    private boolean dfs(StringBuilder sb, int[] visited, int i, boolean[][] adj){
        visited[i]=1;//visiting
        for(int j=0;j<26;j++){
            if(adj[i][j]){
                if(visited[j]==1) return false;
                if(visited[j]==0){
                    if(!dfs(sb,visited,j,adj)) return false;
                }
            }
        }
        visited[i]=2;
        sb.append((char)(i+'a'));
        return true;
    }
    
    private void buildGraph(int[] visited, String[] words, boolean[][] adj){
        for(int i=0;i<visited.length;i++){
            visited[i]=-1; //unvisited
        }
        for(int i=0;i<words.length;i++){
            for(char c:words[i].toCharArray()) visited[c-'a']=0;
            if(i>0){
                String w1 = words[i-1];
                String w2 = words[i];
                if (!w1.equals(w2) && w1.startsWith(w2)) {
                    Arrays.fill(visited, 2);
                    return;
                }
                int len = Math.min(w1.length(),w2.length());
                for(int j=0;j<len;j++){
                    if(w1.charAt(j)!=w2.charAt(j)){
                        adj[w1.charAt(j)-'a'][w2.charAt(j)-'a']=true;
                        break;
                    }
                }
            }
        }
    }
}