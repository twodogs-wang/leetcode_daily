Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

Output: 2
Example 2:

Input: n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

     0           4
     |           |
     1 --- 2 --- 3

Output:  1
----------------------------------------------------------
class Solution {
    public int countComponents(int n, int[][] edges) {
        int[] visited = new int[n];
        int ans=0;
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        for(int i=0;i<edges.length;i++){
            int[] temp = edges[i];
            if(!map.containsKey(temp[0])) map.put(temp[0], new ArrayList<>());
            map.get(temp[0]).add(temp[1]);
            if(!map.containsKey(temp[1])) map.put(temp[1], new ArrayList<>());
            map.get(temp[1]).add(temp[0]);
        }
        for(int i=0;i<n;i++){
            if(visited[i]==0){
                ans++;
                dfs(i,visited,map);
            }
        }
        return ans;
    }
    
    private void dfs(int i,int[] visited, HashMap<Integer, List<Integer>> edges){
        if(visited[i]==1 || !edges.containsKey(i))return;
        //if(!edges.containsKey(i)) return;
        visited[i]=1;
        for(int j:edges.get(i)){
            dfs(j,visited,edges);
        }
        
    }
}