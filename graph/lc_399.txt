Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0.
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
---------------------------------------------------------------
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        HashMap<String, HashMap<String, Double>> graph = new HashMap<>();                   buildGraph(graph,values,equations);
        double[] result = new double[queries.size()];
        for(int i=0;i<queries.size();i++){
            result[i] = dfs(queries.get(i).get(0),queries.get(i).get(1),graph,new HashSet<>());
        }
        return result;
    }
    
    private double dfs(String s1, String s2,HashMap<String, HashMap<String, Double>> graph,HashSet<String> visited){
        if(!graph.containsKey(s1)) return -1.0;
        if(graph.get(s1).containsKey(s2)) return graph.get(s1).get(s2);
        visited.add(s1);
        for(String key:graph.get(s1).keySet()){
            if(!visited.contains(key)){
                double temp = dfs(key,s2,graph,visited);
                if(temp!=-1.0) {
                    return graph.get(s1).get(key)*temp;
                }
            }
        }
        return -1.0;
    }
    
    
    private void buildGraph(HashMap<String, HashMap<String, Double>> map,double[] values,List<List<String>> equations){
        for(int i=0;i<equations.size();i++){
            String s1 = equations.get(i).get(0);
            //System.out.println(s1);
            String s2 = equations.get(i).get(1);
            if(!map.containsKey(s1)){
                map.put(s1,new HashMap<>());
            }
            map.get(s1).put(s2,values[i]);
            if(!map.containsKey(s2)){
                map.put(s2,new HashMap<>());
            }
            map.get(s2).put(s1,1.0/values[i]);
        }
        //System.out.println(map.get("a").get("b"));
    }
}