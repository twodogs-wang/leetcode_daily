Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"
-----------------------------------------
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        if len(s) == 1:
            return s
        end, start = 0, 0
        for i in range(len(s)):
            single = self.__helper(s, i, i)
            double = self.__helper(s, i, i+1)
            if single[0]<double[0]:
                single, double = double, single
            if single[0] > end - start + 1:
                start = single[1]
                end = single[2]
        return s[start:end+1]
        
        
    def __helper(self, s, left, right):
        while left>=0 and right<len(s) and s[left] == s[right]:
            left-=1
            right+=1
        #after the loop finished, s[left]!=s[right], therefore we use -1 rather than +1
        return (right - left - 1, left + 1, right - 1)
