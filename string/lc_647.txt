Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
-----------------------------------------------------------
class Solution:
    def __helper(self, s , p1, p2):
        while p1>=0 and p2<=len(s)-1 and s[p1]==s[p2]:
            self.ans+=1
            p1-=1
            p2+=1
        return
        
        
    def countSubstrings(self, s: str) -> int:
        if not s or s=="":
            return 0
        elif len(s)==1:
            return 1
        self.ans = 0    
        for i in range(len(s)-1):
            self.__helper(s, i, i)
            self.__helper(s, i, i+1)
        self.__helper(s, len(s)-1, len(s)-1)
        return self.ans