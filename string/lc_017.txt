Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
------------------------------------------------------
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        graph = {'2':['a','b','c'] ,'3':['d','e','f'], '4':['g','h','i'],'5':['j','k','l'],'6':['m','n','o'], '7':['p','q','r','s'], '8':['t','u','v'],'9':['w','x','y','z']}
        self.ans = []
        self.__helper(graph, digits, [], 0)
        return self.ans
    
    def __helper(self, graph, digits, _sub_ans, level):
        if level == len(digits):
            self.ans.append("".join(_sub_ans))
            return
        
        for letter in graph[digits[level]]:
            _sub_ans.append(letter)
            self.__helper(graph, digits, _sub_ans, level+1)
            _sub_ans.pop()