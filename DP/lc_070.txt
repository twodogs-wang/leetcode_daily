You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
-----------------------------------------------------------
class Solution {
    public int climbStairs(int n) {
        HashMap<Integer,Integer> dp = new HashMap<Integer, Integer>();
        dp.put(2,2);
        dp.put(1,1);
        dp.put(0,1);
        dp.put(3,3);
        return helper(n,dp);
    }
    private int helper(int n, HashMap<Integer, Integer> dp){
        if (n<0){return 0;}
        else if(n==0){return 1;}
        else{
            if (dp.containsKey(n)){
                return dp.get(n);
            }
            else{
                int temp = helper(n-1,dp) + helper(n-2, dp);
                dp.put(n,temp);
                return dp.get(n);
            }
        }
        
    }
}