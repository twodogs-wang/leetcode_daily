Given a list of words, each word consists of English lowercase letters.

Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".

A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.

Return the longest possible length of a word chain with words chosen from the given list of words.
-----------------------------------------------------------------------
class Solution {
    public int longestStrChain(String[] words) {
        int ans = 0;
        HashSet<String> wordSet = new HashSet<String>(Arrays.asList(words));
        HashMap<String, Integer> map = new HashMap<>();
        for(String word:words){
            ans = Math.max(dfs(word,wordSet,map),ans);
        }
        return ans;
    }
    
    private int dfs(String word,HashSet<String> wordSet, HashMap<String, Integer> map){
        if(map.containsKey(word)){
            return map.get(word);
        }
        int count = 0;
        for(int i=0;i<word.length();i++){
            String temp = word.substring(0,i) + word.substring(i+1);
            if (wordSet.contains(temp)){
                count = Math.max(count,dfs(temp,wordSet,map));
            }
        }
        map.put(word,count+1);
        return count+1;
    }
}