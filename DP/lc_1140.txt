Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alex and Lee take turns, with Alex starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.

 

Example 1:

Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 
-----------------------------
class Solution {
    public int stoneGameII(int[] piles) {
        int n = piles.length;
        int[] suffixsum = new int[n+1];
        for(int i=0;i<piles.length;i++){
            suffixsum[0] += piles[i];
        }
        for(int i=1;i<=piles.length;i++){
            suffixsum[i] = suffixsum[i-1] - piles[i-1];
            //System.out.println(suffixsum[0]);
        }
        
        int[][] dp = new int[n+1][max_m(0, n)+1];
        
        for(int i = n-1;i >= 0;i--){
            for(int m = 1;m <= max_m(i,n);m++){
                for(int x = 1;x <= Math.min(n-i,2*m);x++){
                    int temp_m = Math.min(Math.max(m,x), max_m(i+x,n));
                    dp[i][m] = Math.max(dp[i][m], suffixsum[i] - dp[i+x][temp_m]);
                }
            }
        }
        return dp[0][1];
        
    }
    
    private int max_m (int i, int n){
        double temp = (double)((n-i)/2.0);
        return (int)Math.ceil(temp);
    }
}