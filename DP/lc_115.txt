Given a string S and a string T, count the number of distinct subsequences of S which equals T.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

It's guaranteed the answer fits on a 32-bit signed integer.
-------------------------------------------------------------------
class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp = new int[t.length()+1][s.length()+1];
        for(int i=0;i<=s.length();i++){
            dp[0][i]=1;
        }
        
        for(int i=1;i<=t.length();i++){
            for(int j=1;j<=s.length();j++){
                if(s.charAt(j-1)!=t.charAt(i-1)){
                    dp[i][j] = dp[i][j-1];
                }
                else{
                    dp[i][j] = dp[i-1][j-1] + dp[i][j-1];
                }
            }
        }
        
        return dp[t.length()][s.length()];
    }
}