Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat
---------------------------------------------------------------
class Solution {
    HashSet<String> wordSet;
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        this.wordSet = new HashSet<String>(Arrays.asList(words));
        List<String> ans = new ArrayList<>();
        HashMap<String,Boolean> cache = new HashMap<>();
        for(String word:words){
            if (dfs(word,cache)){
                ans.add(word);
            }
        }
        return ans;
    }
    
    private Boolean dfs(String word,HashMap<String, Boolean> cache){
        if (cache.containsKey(word)){
            return cache.get(word);
        }
        for(int i=1;i<word.length();i++){
            if(this.wordSet.contains(word.substring(0,i))){
                String temp = word.substring(i);
                if(this.wordSet.contains(temp) || dfs(temp,cache)){
                    cache.put(word,true);
                    return true;
                }
            }
        }
        cache.put(word,false);
        return false;
    }
}
