Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
---------------------------------------------------
class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum=0;
        for(int num:nums) sum+=num;
        if(sum%k!=0){return false;}
        return dfs(0,nums,new boolean[nums.length],k,0,sum/k);
        
    }
    
    private boolean dfs(int start, int[] nums, boolean[] seen, int k, int sum, int target){
        if(k==1){return true;}
        if(sum==target){
            return dfs(0,nums,seen,k-1,0,target);
        }
        for(int i=start;i<nums.length;i++){
            if(!seen[i]){
                seen[i]=true;
                if(dfs(i+1, nums, seen, k, sum+nums[i],target)){
                    return true;
                }
                seen[i]=false;
            }
        }
        return false;
    }
}