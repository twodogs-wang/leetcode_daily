There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
------------------------------------------------------------------------------
from bisect import bisect
class Solution:
    
    def __count_via_bst(self,arr, num):
        return bisect(arr,num)
    
    
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if not nums1: 
            return self.median(nums2)
        if not nums2: 
            return self.median(nums1)
        
        n1 = len(nums1)
        n2 = len(nums2)
        total = n1 + n2
        _low = min(nums1[0],nums2[0])
        _high = max(nums1[-1],nums2[-1])
        _target = total/2
        while _low < _high:
            mid = (_low + _high)//2
            cnt = self.__count_via_bst(nums1,mid) + self.__count_via_bst(nums2,mid)
            if cnt < _target:
                _low = mid +1
            else:
                _high = mid
                
        if total%2 == 0:
            indx1 = self.__count_via_bst(nums1,_low)
            indx2 = self.__count_via_bst(nums2,_low)
            if indx1+indx2 > _target:
                return _low #multiple same values
            else:
                if indx1 < len(nums1):
                    h1 = nums1[indx1]
                else:
                    h1 = float("inf")
                    
                if indx2 < len(nums2):
                    h2 = nums2[indx2]
                else:
                    h2 = float("inf")
                h = min(h1,h2)
                #print(indx1,indx2)
                return (_low + h)/2
                    
        else:
            return _low    
        
        
        
    def median(self,arr):
        #print("yeah")
        if len(arr)%2==0:
            _temp = len(arr)//2
            return (arr[_temp-1]+arr[_temp])/2
            
        else:
            return arr[len(arr)//2]