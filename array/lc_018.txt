Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
----------------------------------------
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        self.ans = set()
        self.sub_ans = []
        nums.sort()
        self.__helper(nums, target, 0)
        return self.ans
    
    def __helper(self, nums, target, level):
        if len(self.sub_ans)==4:
            if sum(self.sub_ans)==target:
                self.ans.add(tuple(self.sub_ans))
                return
            return
        
        for i in range(level,len(nums)):
            if nums[i] +  nums[-1] * (3 - len(self.sub_ans)) + sum(self.sub_ans) < target:
                continue #too small
            elif nums[i]*(4-len(self.sub_ans))+sum(self.sub_ans) > target:
                return  #too big
            self.sub_ans.append(nums[i])
            self.__helper(nums, target, i+1)
            self.sub_ans.pop()
            