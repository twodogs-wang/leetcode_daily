Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
-------------------------------------------------------
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        first = {}
        freq = {}
        res = 0
        degree = 0
        for i in range(len(nums)):
            if nums[i] not in first:
                first[nums[i]] = i
            freq[nums[i]] = freq.get(nums[i], 0)+1
            if freq[nums[i]] > degree:
                degree = freq[nums[i]]
                res = i - first[nums[i]] + 1
            elif freq[nums[i]] == degree:
                res = min(res, i - first[nums[i]] + 1)
        return res