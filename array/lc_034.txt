Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
---------------------------------------------------
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int high = nums.length-1;
        int low = 0;
        int[] ans = new int[2];
        if(nums==null || nums.length==0){
            return new int[]{-1,-1};
        }
        
        while(low<high){
            int mid = low + (high-low)/2;
            if(target>nums[mid]){
                low = mid+1;
            }
            else{
                high=mid;
            }
        }
        if(target==nums[low]){
            ans[0] = low;
        }
        else{
            ans[0]=-1;
        }
        
        high = nums.length-1;
        while(low<high){
            int mid = low + 1 +(high-low)/2;
            if(target<nums[mid]){
                high = mid-1;
            }
            else{
                low=mid;
            }
        }
        if(target==nums[high]){
            ans[1]=high;
        }
        else{
            ans[1]=-1;
        }
        return ans;
        
    }
}