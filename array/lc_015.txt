Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
------------------------------------------------------------------------------------
class Solution:
    def __two_sum(self, arr, _ans, n):
        low = 0
        high = len(arr)-1
        while low < high:
            _temp = arr[low] + arr[high] + n
            if _temp == 0:
                tmp = [n, arr[low], arr[high]]
                _ans[tuple(tmp)] = 0
                low += 1
                high -= 1
            elif _temp < 0:
                low += 1
            else:
                high -= 1
        
    
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        _ans = {}
        nums.sort()
        for i in range(len(nums)):
            if nums[i]>0:
                break
            self.__two_sum(nums[i+1:], _ans ,nums[i])
        return list(_ans.keys())
    