Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
---------------------------------------------------------------
class Solution:
    def __helper(self, matrix, bottom, top, left, right):
        if bottom < top or left > right:
            return
        self.ans += matrix[top][left:right]
        for i in range(top, bottom+1):
            self.ans.append(matrix[i][right])
        if top!=bottom:
            self.ans += reversed(matrix[bottom][left:right])
        for i in range(bottom-1, top, -1):
            if left!=right:
                self.ans.append(matrix[i][left])
        self.__helper(matrix, bottom-1, top+1, left+1,right-1)
            
        
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix:
            return
        if len(matrix)==1:
            return matrix[0]
        self.ans = []
        self.__helper(matrix, len(matrix)-1, 0, 0, len(matrix[0])-1)
        return self.ans