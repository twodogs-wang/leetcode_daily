Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
----------------------------------------------
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        if not nums or len(nums)==0:
            return 0
        ptr1 = 0
        ptr2 = 0
        _sum = 0
        _min = float('inf')
        while ptr2<len(nums):
            _sum += nums[ptr2]
            ptr2+=1
            while _sum>=s:
                _min = min(_min,ptr2-ptr1)
                _sum -= nums[ptr1]
                ptr1+=1
        if _min==float('inf'):
            return 0
        return _min