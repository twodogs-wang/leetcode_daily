Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1¡ú3¡ú1¡ú1¡ú1 minimizes the sum.
---------------------------------------------------------------
class Solution {
    public int minPathSum(int[][] grid) {
        if (grid.length==0){return 0;}
        
        ArrayList<ArrayList<Integer>> dp = new ArrayList<ArrayList<Integer>>();
        
        for (int i=0;i<grid.length;i++){
            ArrayList<Integer> temp = new ArrayList<Integer>();
            for (int j=0;j<grid[0].length;j++){
                if (i==0 && j==0){
                    temp.add(grid[i][j]);
                    continue;
                }
                temp.add(0);
            }
            dp.add(temp);
        }
        
        for (int i=1;i<grid.length;i++){
            int temp = grid[i][0] + dp.get(i-1).get(0);
            dp.get(i).set(0,temp);
        }
        for (int i=1;i<grid[0].length;i++)
        {
            int temp = grid[0][i] + dp.get(0).get(i-1);
            dp.get(0).set(i, temp);
        }
        
        for (int i=1;i<grid.length;i++){
            for (int j=1;j<grid[0].length;j++){
                dp.get(i).set(j, grid[i][j] + Math.min(dp.get(i-1).get(j),dp.get(i).get(j-1)));
            }
        }
        return dp.get(dp.size()-1).get(dp.get(0).size()-1);
    }
}