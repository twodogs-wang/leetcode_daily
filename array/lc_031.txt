Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
------------------------
class Solution:
    def swap(self, arr, a, b):
        arr[a], arr[b] = arr[b], arr[a]
        return
    
    def reverse(self, nums, l, r):
        while l<r:
            nums[l], nums[r] = nums[r], nums[l]
            l += 1
            r -= 1
        return
    
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        if not nums or len(nums) <= 1:
            return
        
        first_decrease = len(nums) - 1
        #find first decreasing element
        while first_decrease > 0 and nums[first_decrease] <= nums[first_decrease-1]:
            first_decrease -= 1
        
        #sort and return if not found
        if first_decrease == 0:
            nums.sort()
            return
        
        first_decrease -= 1
        just_greater = len(nums) - 1
        while True:
            if nums[just_greater] > nums[first_decrease]:
                break
            just_greater -= 1
        
        self.swap(nums, first_decrease, just_greater)
        self.reverse(nums, first_decrease + 1, len(nums) - 1)
        
            
        