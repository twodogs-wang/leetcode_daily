Given an integer array of size n, find all elements that appear more than ? n/3 ? times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
--------------------------------------------------------
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        cnt1 = 0
        cnt2 = 0
        first = None
        second = None
        for i in range(len(nums)):
            if first == nums[i]:
                cnt1+=1
            elif second ==nums[i]:
                cnt2+=1
            elif cnt1==0:
                first = nums[i]
                cnt1+=1
            elif cnt2==0:
                cnt2+=1
                second = nums[i]
            else:
                cnt1-=1
                cnt2-=1
        cnt1, cnt2 = 0, 0
        for i in range(len(nums)):
            if nums[i]==first:
                cnt1+=1
            elif nums[i]==second:
                cnt2+=1
        _ans = []
        if cnt1>len(nums)//3:
            _ans.append(first)
        if cnt2>len(nums)//3:
            _ans.append(second)
        return _ans