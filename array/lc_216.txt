Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
-------------------------------------------
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        if k*9 <= n:
            return []
        self.k=k
        self.ans = []
        self.sub_ans = []
        self.helper(0,n)
        return self.ans
        
        
        
    def helper(self,level,target):
        if sum(self.sub_ans)>target:
            return
        if level==self.k:
            if sum(self.sub_ans)==target:
                if self.sub_ans not in self.ans:
                    self.ans.append(self.sub_ans[:])
            return
        
        start=0
        if self.sub_ans:
            start = self.sub_ans[-1]
        for i in range(start+1,10):
            self.sub_ans.append(i)
            self.helper(level+1,target)
            self.sub_ans.pop()