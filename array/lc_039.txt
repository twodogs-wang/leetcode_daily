Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
----------------------------------------
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        if not candidates or len(candidates)==0:
            return [[]]
        self.ans = []
        self.sub_ans = []
        candidates.sort()
        self.dfs(candidates, 0, target)
        return self.ans
        
        
        
    def dfs(self, arr, level, target):
        if level==len(arr):
            return
        elif sum(self.sub_ans)==target:
            if sorted(self.sub_ans) not in self.ans:
                self.ans.append(self.sub_ans[:])
        elif sum(self.sub_ans)>target:
            return
        for i in range(level,len(arr)):
            if arr[i]>target:
                return
            self.sub_ans.append(arr[i])
            self.dfs(arr, i,target)
            self.sub_ans.pop()