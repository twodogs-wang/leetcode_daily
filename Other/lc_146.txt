Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?
----------------------------------------------
class Node:
    def __init__(self,a,b):
        self.a = a
        self.b = b
        self.prev = None
        self.next = None
    def get(self):
        return self.b
    
class LRUCache:

    def __init__(self, capacity: int):
        self.head = Node(0,0)
        self.tail = Node(0,0)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.size = 0
        self.capacity = capacity
        self.dict = {}
        
    def get(self, key: int) -> int:
        if key not in self.dict:
            return -1
        n=self.dict[key]
        self.remove(n)
        self.add(n)
        return n.get()

    def put(self, key: int, value: int) -> None:
        if key in self.dict:
            node = self.dict[key]
            node.b=value
            self.remove(node)
            self.add(node)
        elif self.size<self.capacity:
                temp = Node(key,value)
                self.add(temp)
                self.size+=1
                self.dict[key]=temp
        else:
            target = self.head.next
            del self.dict[target.a]
            self.remove(target)
            temp = Node(key,value)
            self.add(temp)
            self.dict[key]=temp
                
        
    def remove(self,node):
        temp = node.prev
        temp.next = node.next
        node.next.prev = temp
        
    def add(self,node):
        temp = self.tail.prev
        temp.next = node
        node.next = self.tail
        node.prev = temp
        self.tail.prev = node
        
