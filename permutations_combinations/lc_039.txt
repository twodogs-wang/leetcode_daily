Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
-----------------------------------------------------------
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        if not candidates or len(candidates)==0:
            return [[]]
        self.ans = []
        candidates.sort()
        self.__helper(candidates, target, [], 0)
        return self.ans
    
    def __helper(self, arr, target, _buffer, _start):
        if target == 0:
            self.ans.append(_buffer[:])
        
        for i in range(_start, len(arr)):
            if arr[i] > target:
                return
            _buffer.append(arr[i])
            self.__helper(arr, target - arr[i], _buffer, i)#not i+1 since we can reuse elements
            _buffer.pop()