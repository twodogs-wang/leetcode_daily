Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
--------------------------------------------------------
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        if not candidates or len(candidates) == 0:
            return [[]]
        
        candidates.sort()
        self._ans = []
        self.__helper(candidates, target, [], 0)
        return self._ans
    
        
    def __helper(self, arr, target, _buffer, _start):
        if target == 0:
            self._ans.append(_buffer[:])
        for i in range(_start, len(arr)):
            if arr[i] > target:
                return
            elif i > _start and arr[i] == arr[i-1]: 
                continue
            _buffer.append(arr[i])
            self.__helper(arr, target - arr[i], _buffer, i+1)
            _buffer.pop()