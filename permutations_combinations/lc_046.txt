Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
-----------------------------------------------------
class Solution:
    def __init__(self):
        self.ans = list()
    
    def permute(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) == 0:
            return []
        _register = [False for i in range(len(nums))]
        _sub_ans = []
        self.__helper(nums, _sub_ans, _register, 0)
        return self.ans
    
    
    def __helper(self, nums, _sub_ans, _register, level):
        if level == len(nums):
            self.ans.append(_sub_ans[:])
            return
        for i in range(len(_register)):
            if not _register[i]:
                _sub_ans.append(nums[i])
                _register[i] = True
                self.__helper(nums, _sub_ans, _register, level+1)
                _register[i] = False
                _sub_ans.pop()