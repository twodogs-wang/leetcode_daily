Implement a magic directory with buildDict, and search methods.

For the method buildDict, you'll be given a list of non-repetitive words to build a dictionary.

For the method search, you'll be given a word, and judge whether if you modify exactly one character into another character in this word, the modified word is in the dictionary you just built.

Example 1:
Input: buildDict(["hello", "leetcode"]), Output: Null
Input: search("hello"), Output: False
Input: search("hhllo"), Output: True
Input: search("hell"), Output: False
Input: search("leetcoded"), Output: False
------------------------------------------------
class MagicDictionary {
    HashMap<String, Character> map;
    /** Initialize your data structure here. */
    public MagicDictionary() {
        this.map = new HashMap<String, Character>();
    }
    
    /** Build a dictionary through a list of words */
    public void buildDict(String[] dict) {
        for(String word:dict){
            for(int i=0;i<word.length();i++){
                String mw = word.substring(0,i)+"*"+word.substring(i+1);
                if(!map.containsKey(mw)){
                    this.map.put(mw,word.charAt(i));
                }
                else if(map.get(mw)!=word.charAt(i)){
                    this.map.put(mw,'0');
                }
            }
        }
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    public boolean search(String word) {
        for(int i=0;i<word.length();i++){
            String mw = word.substring(0,i)+"*"+word.substring(i+1);
            if(this.map.containsKey(mw) && this.map.get(mw)!=word.charAt(i)){
                return true;
            }
        }
        return false;
    }
}
