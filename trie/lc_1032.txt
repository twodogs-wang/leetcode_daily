Implement the StreamChecker class as follows:

StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
------------------------------------------------
class StreamChecker {
    class Node{
        boolean isWord;
        Node[] kids = new Node[26];
    }
    Node root = new Node();
    StringBuilder sb = new StringBuilder();
        
    public StreamChecker(String[] words) {
        buildTree(words);
    }
    
    public boolean query(char letter) {
        sb.append(letter);
        Node node = root;
        for(int i=sb.length()-1;i>=0 && node!=null;i--){
            char c = sb.charAt(i);
            node = node.kids[c-'a'];
            if(node!=null && node.isWord){
                return true;
            }
        }
        return false;
    }
    
    private void buildTree(String[] words){
        
        for(String word:words){
            Node node = root;
            for(int i=word.length()-1;i>=0;i--){
                char c = word.charAt(i);
                if(node.kids[c-'a']==null){
                    node.kids[c-'a']=new Node();
                }
                node = node.kids[c-'a'];
            }
            node.isWord=true;
        } 
    }
}

