Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:

Input: [3, 10, 5, 25, 2, 8]

Output: 28

Explanation: The maximum result is 5 ^ 25 = 28.
-------------------------------------------------
class trie:
    def __init__(self):
        self.kids = [None,None]
        

class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        if not nums or len(nums)==0:
            return
        root = trie()
        
        for num in nums:
            current_node = root
            for i in range(31,-1,-1):
                curr_bit = (num>>i)&1
                if not current_node.kids[curr_bit]:
                    current_node.kids[curr_bit] = trie()
                current_node = current_node.kids[curr_bit]
        
        _max = float('-inf')
        for num in nums:
            curr_node = root
            _sum = 0
            for i in range(31,-1,-1):
                curr_bit = (num>>i)&1
                if curr_node.kids[curr_bit^1]:
                    _sum += (1<<i)
                    curr_node = curr_node.kids[curr_bit^1]
                else:
                    curr_node = curr_node.kids[curr_bit]
            _max = max(_max,_sum)
        return _max