Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
------------------------------------
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        Node root = buildTree(words);
        List<String> ans = new ArrayList<String>();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                dfs(board,i,j,root,ans);
            }
        }
        return ans;
    }
    
    
    private void dfs(char[][] board,int i, int j, Node node,List<String> res){
        //if(i<0 || j<0) return;
        if (board[i][j]=='#' || node.kids[board[i][j]-'a']==null) return;
        node = node.kids[board[i][j]-'a'];
        if (node.w!=null){
            res.add(node.w);
            node.w=null;
        }
        char c = board[i][j];
        board[i][j]='#';
        
        if(i-1>=0) dfs(board,i-1,j,node,res);
        if(j-1>=0) dfs(board,i,j-1,node,res);
        if(i+1<board.length) dfs(board, i+1,j,node,res);
        if(j+1<board[0].length) dfs(board, i, j+1, node,res);
        
        board[i][j]=c;
        
    }
    
    private Node buildTree(String[] words){
        Node root = new Node();
        for(String word:words){
            Node node = root;
            for(char c:word.toCharArray()){
                if (node.kids[c-'a']==null){
                    node.kids[c-'a'] = new Node();
                }
                node = node.kids[c-'a'];
            }
            node.w = word;
        }
        return root;
    }
    class Node{
        Node[] kids = new Node[26];
        String w;
    }
}