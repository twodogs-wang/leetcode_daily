Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
--------------------------------
class Trie {
    
    class Node{
        Node[] kids = new Node[26];
        String item;
    }
    Node root;
    /** Initialize your data structure here. */
    public Trie() {
        Node r = new Node();
        this.root = r;
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        char[] w = word.toCharArray();
        Node node = this.root;
        for(char c:w){
            if(node.kids[c-'a']==null){
                node.kids[c-'a']=new Node();
            }
            node = node.kids[c-'a'];
        }
        node.item=word;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node node = this.root;
        for(char c:word.toCharArray()){
            if (node.kids[c-'a']==null){
                return false;
            }
            node = node.kids[c-'a'];
        }
        return node.item!=null;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String word) {
        Node node = this.root;
        for(char c:word.toCharArray()){
            if (node.kids[c-'a']==null){
                return false;
            }
            node = node.kids[c-'a'];
        }
        return true;
    }
}