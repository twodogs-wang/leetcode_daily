# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        fast = head
        slow = head
        if not head or head.next==None:
            return
        while True:
            try:
                fast = fast.next.next
                slow = slow.next
            except:
                return
            if slow==fast:
                break
        slow = head
        #pos=0
        while fast!=slow:
            fast=fast.next
            slow=slow.next
            #pos+=1
        return slow