Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.
------------------------------------------------
import heapq
class Solution:
    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        if not heightMap or len(heightMap) <= 2 or len(heightMap[0])<=2:
            return 0
        direction = ((0,1),(1,0),(0,-1),(-1,0))
        queue = []
        visited = {}
        ans = 0
        for i in range(len(heightMap)):
            visited[(i,0)] = 0
            visited[(i,len(heightMap[0])-1)] = 0
            heapq.heappush(queue,(heightMap[i][0], i, 0))
            heapq.heappush(queue,(heightMap[i][len(heightMap[0])-1], i, len(heightMap[0])-1))
        
        for i in range(len(heightMap[0])):
            visited[(0, i)] = 0
            visited[(len(heightMap)-1,i)] = 0
            heapq.heappush(queue,(heightMap[0][i], 0, i))
            heapq.heappush(queue, (heightMap[len(heightMap)-1][i],len(heightMap)-1,i))
        
        while len(queue)>0:
            curr_height, x, y = heapq.heappop(queue)
            for pair in direction:
                x_, y_ = x + pair[0], y + pair[1]
                if self.inBound(heightMap, x_, y_) and ((x_,y_) not in visited):
                    visited[(x_,y_)] = 0
                    heapq.heappush(queue,(max(heightMap[x_][y_], curr_height),x_,y_))
                    ans += max(0,curr_height - heightMap[x_][y_])
        return ans