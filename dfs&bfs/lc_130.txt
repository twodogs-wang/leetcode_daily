Share
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
---------------------------------------------------------------
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        
        self.directions = ((1,0),(0,1),(0,-1),(-1,0))
        for i in range(len(board)):
            for j in range(len(board[0])):
                if i==0 or j==0:
                    if board[i][j]=="O":
                        self.dfs(board,i,j)
                if i==len(board)-1 or j==len(board[0])-1:
                    if board[i][j]=="O":
                        self.dfs(board,i,j)
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]=="E":
                    board[i][j]="O"
                
                elif board[i][j]=="O":
                    board[i][j]="X"
        
        
        
    def dfs(self,board,x,y):
        if x<0 or x>len(board)-1 or y<0 or y>len(board[0])-1:
            return
        elif board[x][y]=="X":
            return
        elif board[x][y]=="E":
            return
        
        board[x][y]="E"
        for dx,dy in self.directions:
            self.dfs(board,x+dx,y+dy)
        