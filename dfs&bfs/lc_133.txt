Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
------------------------------------------------
"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return node
        ans = node
        graph = {node:Node(node.val)}
        queue = collections.deque()
        queue.append(node)
        while len(queue)>0:
            curr = queue.popleft()
            for node in curr.neighbors:
                if node in graph:
                    graph[curr].neighbors.append(graph[node])
                else:
                    # not visited
                    graph[node] = Node(node.val)
                    graph[curr].neighbors.append(graph[node])
                    queue.append(node)
        return graph[ans]


