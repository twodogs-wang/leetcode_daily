In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
--------------------------------------------------------------------------------
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        self.grid = grid
        ans = self.__helper(0)
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                if self.grid[i][j]==1:
                    return -1
        return ans
    
    def get_neigbor(self, grid, x, y):
        temp = []
        if x-1>=0:
            temp.append(grid[x-1][y])
        if x+1 < len(grid):
            temp.append(grid[x+1][y])
        if y-1>=0:
            temp.append(grid[x][y-1])
        if y+1<len(grid[0]):
            temp.append(grid[x][y+1])
        return temp
    
    def __helper(self, level):
        get_bad = []
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                nei = self.get_neigbor(self.grid,i,j)
                if nei.count(2)>=1 and self.grid[i][j]==1:
                    get_bad.append((i,j))
                    
        if len(get_bad)==0:
            return 0
        for point in get_bad:
            self.grid[point[0]][point[1]] = 2
        
        return 1 + self.__helper(level+1)


