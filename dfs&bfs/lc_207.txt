There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
------------------------------------------------------------------------
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = collections.defaultdict(list)
        for pair in prerequisites:
            graph[pair[0]].append(pair[1])
        visited = [-1 for i in range(numCourses)] # -1 unvisited, 0, visiting, 1 visited
        for course in range(numCourses):
            if self.checkIfNoCycle(visited, graph, course) == False:
                return False
        return True
        
    def checkIfNoCycle(self, visited, graph, course):
        if visited[course] == 0: #visiting
            return False
        elif visited[course] == 1: #visited
            return True
        
        visited[course] = 0
        for nei in graph[course]:
            if self.checkIfNoCycle(visited, graph, nei) == False:
                return False
        visited[course] = 1
        return True
            