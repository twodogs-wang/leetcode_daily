Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.



(Note that in the examples below, all sequences are serializations of ListNode objects.)

----------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeZeroSumSublists(self, head: ListNode) -> ListNode:
        if not head:
            return
        if not head.next:
            if head.val!=0:
                return head
            return
        dummy = ListNode(-1)
        dummy.next = head
        _sum = {}
        _sum[0] = dummy

        #del_node = None
        new_sum = 0
        pre = dummy
        while head:
            new_sum += head.val
            if new_sum in _sum:
                # Zero sum found
                temp = _sum[new_sum].next
                _sum[new_sum].next = head.next
                del_sum = new_sum
                # Remove deleted node references from sums
                while temp.next != head.next:
                    del_sum += temp.val
                    del _sum[del_sum]
                    temp = temp.next
            else:
                _sum[new_sum] = head
            head = head.next
        return dummy.next
        
