Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
---------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        lists0 = []
        for i in range(len(lists)):
            if lists[i]:
                lists0.append(lists[i])
        if len(lists0) == 0:
            return None
        head = ListNode(0)
        temp = head
        #print(len(lists))
        while len(lists0)>0:
            lists0 = sorted(lists0, key = lambda x:x.val)
            head.val = lists0[0].val
            if not lists0[0].next:
                lists0.remove(lists0[0])
            else:
                lists0[0] = lists0[0].next
            if len(lists0)>0:
                head.next = ListNode(0)
                head = head.next
        return temp
