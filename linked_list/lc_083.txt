Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3
-------------------------------------------------
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return
        if not head.next:
            return head

        _list=[]
        _temp=[]
        while head.next:
            if head.val in _temp:
                head=head.next
                continue
            _list.append(head)
            _temp.append(head.val)
            head=head.next

        if not head.val in _temp:
            _list.append(head)

        for i in range(len(_list)-1):
            _list[i].next=_list[i+1]

        _list[-1].next=None
        return _list[0]

            
