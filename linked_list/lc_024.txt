Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.



Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
----------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (head == NULL)
            return NULL;
        if (head->next == NULL)
            return head;
        ListNode* temp = head;
        ListNode* pre = NULL;
        while (head!=NULL)
        {
            if (head == temp)
            {
                //at the begining
                ListNode* second = head->next;
                ListNode* third = second->next;
                second->next=head;
                head->next=third;
                head = third;
                temp = second;
                pre = temp->next;
                if (head==NULL)
                {
                    return temp;
                }
            }
            if (head->next==NULL)
            {
                return temp;
            }
            ListNode* first = head;
            ListNode* second = head->next;
            ListNode* third = second->next;
            pre -> next = second;
            second ->next = first;
            first->next = third;
            pre = first;
            head = third;

        }
        return temp;
    }
};
