Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
----------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def sortList(self, head: ListNode) -> ListNode:

        if not head:
            return None
        elif not head.next:
            return head

        _list=[]

        while head.next:
            _list.append(head)
            head=head.next
        _list.append(head)

        _list=sorted(_list,key=lambda x : x.val)

        for i in range(len(_list)-1):
            _list[i].next=_list[i+1]

        _list[-1].next=None
        return _list[0]
