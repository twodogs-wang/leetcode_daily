Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
-----------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        std::vector<int>* my_stack = new std::vector<int>;
        std::vector<int>* second = new std::vector<int>;
        if (head==NULL)
        {
            return true;
        }
        if (head->next==NULL)
        {
            return true;
        }
        while (head)
        {
            my_stack->push_back(head->val);
            second->push_back(head->val);
            head = head->next;
        }
        std::reverse(second->begin(), second->end());
        auto i1 = my_stack->begin();
        auto i2 = second->begin();
        while (i1!=my_stack->end())
        {
            if (*i1!=*i2)
            {
                delete my_stack;
                delete second;
                return false;
            }
            i1++;
            i2++;
        }
        delete my_stack;
        delete second;
        return true;
    }
};
