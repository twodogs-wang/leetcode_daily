You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
-------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        std::vector<int> a;
        std::vector<int> b;
        while (l1 || l2)
        {
            if (l1)
            {
                a.push_back(l1->val);
                l1=l1->next;
            }
            //a.push_back(l1);
            if(l2)
            {
                b.push_back(l2->val);
                l2=l2->next;
            }
        }
        std::reverse(a.begin(),a.end());
        std::reverse(b.begin(),b.end());
        int carry = 0;
        std::vector<int> sum;
        auto it1 = a.begin();
        auto it2 = b.begin();
        for(size_t i=0;i<std::min(a.size(),b.size());i++)
            {
                //if (i==)
                int temp = *it1 + *it2+carry;
                if (temp>=10)
                {
                    temp=temp%10;
                    carry = 1;
                }
                else
                {
                    carry = 0;
                }
                it1++;
                it2++;
                sum.push_back(temp);
            }
        while(it1!=a.end()||it2!=b.end())
        {
            if(it1!=a.end())
            {
                int tmp = *it1+carry;
                if (tmp>=10)
                {
                    tmp = tmp%10;
                    carry = 1;
                }
                else
                {
                    carry = 0;
                }
                sum.push_back(tmp);
                //carry = 0;
                it1++;
            }
            else
            {
                int tmp = *it2+carry;
                if (tmp>=10)
                {
                    tmp = tmp%10;
                    carry = 1;
                }
                else
                {
                    carry = 0;
                }
                sum.push_back(tmp);
                //carry = 0;
                it2++;
            }
        }

        if (carry>0)
        {
            sum.push_back(1);
        }
        std::reverse(sum.begin(),sum.end());
        ListNode* head = new ListNode(0);
        ListNode* temp = head;
        for (size_t i =0;i<sum.size();i++)
        {
            if (i==0)
            {
                head->val = sum[0];
                continue;
            }
            head->next = new ListNode(sum[i]);
            head = head->next;
        }
        return temp;
    }
};
