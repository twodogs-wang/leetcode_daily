We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc.

Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0.

Return an array of integers answer, where answer[i] = next_larger(node_{i+1}).

Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.
--------------------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def __check_if_sorted_reverse(self,head):
        size = 0
        while head.next:
            if head.val>=head.next.val:
                size+=1
                head = head.next
                continue
            else:
                return False,0
        return True,size+1

    def nextLargerNodes(self, head: ListNode) -> List[int]:
        if not head:
            return
        if not head.next:
            return [0]
        flag,size = self.__check_if_sorted_reverse(head)
        if flag:
            return [0]*size
        curr = head
        _ans = []
        while curr.next:
            temp = curr.next
            found = False
            while temp:
                if temp.val>curr.val:
                    _ans.append(temp.val)
                    found = True
                    break

                temp=temp.next
                continue
            curr=curr.next
            if not found:
                _ans.append(0)
        _ans.append(0)
        return _ans
            
