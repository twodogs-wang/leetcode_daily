Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
-----------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1==NULL)
        {
            return l2;
        }
        else if (l2==NULL)
        {
            return l1;
        }
        ListNode* head = new ListNode(0);
        ListNode* temp = head;
        while (l1!=NULL or l2!=NULL)
        {
            if (l1!=NULL && l2!=NULL)
            {
                if (l1->val < l2->val)
                {
                    head->val = l1->val;
                    l1 = l1->next;
                    head->next = new ListNode(0);
                    head = head->next;
                    continue;
                }
                else
                {
                    head->val = l2->val;
                    l2 = l2->next;
                    head->next = new ListNode(0);
                    head = head->next;
                    continue;
                }
            }
            else if (l1!=NULL)
            {
                head->val = l1->val;
                head->next = l1->next;
                //std::cout<<"yeah"<<l1->val<<endl;
                return temp;

            }
            else if (l2!=NULL)
            {
                head->val = l2->val;
                head->next = l2->next;
                return temp;
            }
            else
            {
                return temp;
            }
        }
        return temp;
    }
};
