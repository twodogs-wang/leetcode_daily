Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.
-------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* list[n+1];
        ListNode* ans = head;
        list[0]=head;
        if (head->next == NULL)
        {
            return NULL;
        }

        if (n==1)
        {
            while (1)
            {
                ListNode* pre = head;
                head = head->next;
                if (head->next==NULL)
                {
                    pre->next = NULL;
                    delete head;
                    return ans;
                }
            }
        }




        while (1)
        {
            for (int i =1;i<=n;i++)
            {
                list[i] = list[i-1]->next;
            }
            if (list[n] == NULL and list[0] != ans)
            {
                return NULL;
            }
            if (list[n] == NULL)
            {
                return list[1];
            }
            if (list[n]->next == NULL)
            {
                list[0]->next = list[2];
                delete list[1];
                return ans;
            }
            list[0] = list[0]->next;
        }



    }
};
