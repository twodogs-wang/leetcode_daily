Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Return the linked list sorted as well.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5
Example 2:

Input: 1->1->1->2->3
Output: 2->3
--------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:

        if not head:
            return None

        if not head.next:
            return head

        _list=[]

        while head.next:
            _list.append(head)
            head=head.next
        _list.append(head)

        _trash=[]
        i=0
        while True:
            if i==len(_list)-1:
                break

            elif _list[i].val==_list[i+1].val:
                _trash.append(_list[i].val)
                _list=_list[:i]+_list[i+1:]

            else:
                i+=1
        i=0

        while True:
            if i == len(_list)-1:
                if _list[i].val not in _trash:
                    break
                else:
                    _list.pop()
                    break

            elif _list[i].val in _trash:
                _list=_list[:i]+_list[i+1:]

            else:
                i+=1

        if not _list:
            return None


        for i in range(len(_list)-1):
            try:
                _list[i].next=_list[i+1]
            except:
                _list[0].next=None
                return _list[0]

        _list[len(_list)-1].next=None

        return _list[0]
