Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ¡Ü m ¡Ü n ¡Ü length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
--------------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:
        m=m-1
        _list=[]

        while head.next:
            _list.append(head)
            head=head.next           #put all nodes in a list
        _list.append(head)

        _front=_list[:m]
        _end=_list[n:]
        _reverse=_list[m:n]          #reverse the sublist
        _reverse.reverse()

        _list=_front+_reverse+_end

        for i in range(len(_list)-1):  #re-link them
            _list[i].next=_list[i+1]

        _list[-1].next=None
        return _list[0]                 #done
            
