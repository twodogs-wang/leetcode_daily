Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

 

Example 1:



Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.
------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def delNodes(self, root: TreeNode, to_delete: List[int]) -> List[TreeNode]:
        if not root:
            return []
        if not to_delete or len(to_delete)==0:
            return [root]
        self.to_delete = set(to_delete)
        self.ans = []
        if root.val not in self.to_delete:
            self.ans.append(root)
        self.traverse(root)
        return self.ans
    
    def helper(self, target):
        self.to_delete.remove(target.val)
        if target.left==None and target.right==None:
            return
        
        if target.left:
            if target.left.val not in self.to_delete:
                self.ans.append(target.left)
                self.traverse(target.left)
            else:
                self.helper(target.left)
            
        if target.right:
            if target.right.val not in self.to_delete:
                self.ans.append(target.right)
                self.traverse(target.right)
            else:
                self.helper(target.right)
        
        
        
    def traverse(self,root):
        if not root or len(self.to_delete)==0:
            return
        if root.val in self.to_delete:
            self.helper(root)
            return
        if root.left:
            if root.left.val in self.to_delete:
                target = root.left
                self.helper(target)
                root.left = None
            else:
                self.traverse(root.left)
                
        if root.right:
            if root.right.val in self.to_delete:
                target = root.right
                self.helper(target)
                root.right = None
            else:
                self.traverse(root.right)