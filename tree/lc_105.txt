Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
----------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder:
            return None
        if len(preorder)==1:
            return TreeNode(preorder[0])
        self.root_index = 0
        return self.__helper(preorder,inorder)
    
    def __helper(self,preorder,inorder):
        if self.root_index == len(preorder):
            return None
        elif len(inorder)==0:
            return None
        root = TreeNode(preorder[self.root_index])
        self.root_index += 1
        indx = 0
        for i in range(len(inorder)):
            if inorder[i]==root.val:
                indx=i
                break
        root.left = self.__helper(preorder, inorder[:indx])
        root.right = self.__helper(preorder, inorder[indx+1:])
        return root