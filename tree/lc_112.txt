Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
-------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        self.sum = sum
        self.ans = False
        self.__helper(root,0)
        return self.ans
    
    
    def __helper(self, root, curr_sum):
        if not root:
            return
        elif self.ans:
            return
        if root.left or root.right:
            self.__helper(root.left, curr_sum + root.val)
            self.__helper(root.right, curr_sum + root.val)
        else:
            if curr_sum + root.val == self.sum:
                self.ans = True
                return