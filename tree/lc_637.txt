Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.
-------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def averageOfLevels(self, root: TreeNode) -> List[float]:
        if not root:
            return []
        self.ans = collections.defaultdict(list)
        self.__helper(root,0)
        res = []
        for k in sorted(list(self.ans.keys())):
            res.append(self.average(self.ans[k]))
        return res
        
    def __helper(self,root,level):
        if not root:
            return
        self.ans[level].append(root.val)
        self.__helper(root.left,level+1)
        self.__helper(root.right,level+1)
        
    def average(self,arr):
        return sum(arr)/len(arr)