Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3
-------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        self.ans = []
        self.__helper(root, "")
        return self.ans
    
    
    def __helper(self, root, _str):
        if not root and _str=="":
                return
        _str += str(root.val)+"->"
        if root.left or root.right:
            if root.left:
                self.__helper(root.left, _str)
            if root.right:
                self.__helper(root.right, _str)
        else:
            self.ans.append(_str[:-2])
            return