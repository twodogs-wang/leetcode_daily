Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
---------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> ans;
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        this.ans = new ArrayList<>();
        if (root==null){return this.ans;}
        
        List<Integer> temp = new ArrayList<Integer>();
        backtrack(root, sum, 0, temp);
        return this.ans;
    }
    
    
    private void backtrack(TreeNode root, int target, int sum, List<Integer> temp){
        if (root==null){return;}
        
        temp.add(root.val);
        sum += root.val;
        
        if(root.left==null && root.right==null){
            if (sum==target){
                this.ans.add(deepcopy(temp));
            }
            temp.remove(temp.size()-1);
            return;
        }
        
        backtrack(root.left, target, sum, temp);
        backtrack(root.right, target, sum, temp);
        temp.remove(temp.size()-1);
        
    }
    
    private List<Integer> deepcopy(List<Integer> temp){
        List<Integer> _new = new ArrayList();
        for (int i=0;i<temp.size();i++){
               _new.add(temp.get(i));
        }
        return _new;
    }
}