Share
Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals pre and post are distinct positive integers.

 

Example 1:

Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
 

Note:

1 <= pre.length == post.length <= 30
pre[] and post[] are both permutations of 1, 2, ..., pre.length.
It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.
-----------------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:
        if len(pre)==0:
            return None
        elif len(pre)==1:
            return TreeNode(pre[0])
        
        return self.__helper(pre,post)
        
    def __helper(self, pre, post):
        if not pre:
            return
        elif len(pre)==1:
            return TreeNode(post.pop())
        
        root = TreeNode(post.pop())
        ind = pre.index(post[-1])
        root.right = self.__helper(pre[ind:],post)
        root.left = self.__helper(pre[1:ind],post)
        
        return root