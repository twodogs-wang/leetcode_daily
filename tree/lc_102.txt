Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
--------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        self.dict = {}
        if not root:
            return []
        self.__helper(root,0)
        _ans = []
        for i in range(len(list(self.dict.keys()))):
            _ans.append(self.dict[i])
        return _ans
            
        
        
    def __helper(self, root, level):
        if not root:
            return
        if level in self.dict:
            self.dict[level].append(root.val)
        else:
            self.dict[level] = [root.val]
            
        self.__helper(root.left, level+1)
        self.__helper(root.right, level+1)