Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
----------------------------------------------------
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        _temp = []
        self.preorder(root, _temp)
        return " ".join(str(p) for p in _temp)
    
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        #data = data.split("")
        #data.reverse()
        data = data.split(" ")
        data.reverse()
        return self.dfs(data)
        
        
    def dfs(self, data):
        if data == []:
            return None
        _temp = data.pop()
        if not _temp or _temp == "None":
            return None
        root = TreeNode(int(_temp))
        root.left = self.dfs(data)
        root.right = self.dfs(data)
        return root
    
    def preorder(self, root, _stack):
        if not root:
            _stack.append(None)
            return
        _stack.append(root.val)
        self.preorder(root.left,_stack)
        self.preorder(root.right,_stack)