Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
----------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return True
        root1 = root
        root2 = root
        return self.__helper(root1, root2)
        
        
    def __helper(self, root1, root2):
        if root1 == None or root2 == None:
            return root1 == root2
        elif root1.val!=root2.val:
            return False
        return self.__helper(root1.left, root2.right) and self.__helper(root1.right, root2.left)
            
        