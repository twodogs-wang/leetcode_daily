Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
----------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> temp;
    public TreeNode increasingBST(TreeNode root) {
        if (root==null){return null;}
        else if(root.left==null && root.right==null){return root;}
        this.temp = new ArrayList<TreeNode>();
        traverse(root);
        for(int i=0; i<this.temp.size()-1; i++){
            this.temp.get(i).left = null;
            this.temp.get(i).right = this.temp.get(i+1);
            
        }
        return this.temp.get(0);
        
    }
    
    private void traverse(TreeNode root){
        if(root==null){return;}
        traverse(root.left);
        this.temp.add(root);
        traverse(root.right);
    }
}