Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
---------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Stack<Integer> post = new Stack<Integer>();
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder==null || inorder.length==0) {return null;}
        HashMap<Integer, Integer> map = new HashMap();
        for(int i=0;i<inorder.length;i++){
            post.push(postorder[i]);
            map.put(inorder[i],i);
        }
        
        return helper(0, inorder.length-1, map);
    }
    
    
    private TreeNode helper(int start, int end, HashMap<Integer, Integer> inorder){
        if (start>end || post.empty()){return null;}
        
        int temp = post.pop();
        int index = inorder.get(temp);
        TreeNode root = new TreeNode(temp);
        if (start==end){return root;}
        root.right = helper(index+1, end, inorder);
        root.left = helper(start, index-1, inorder);
        return root;
    }
}