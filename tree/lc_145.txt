Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?
-----------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> ans = new ArrayList<>();
        if(root==null){return ans;}
        Stack<TreeNode> _stack = new Stack<>();
        _stack.push(root);
        while (!_stack.empty()){
            TreeNode curr = _stack.pop();
            ans.add(curr.val);
            if (curr.left!=null){_stack.push(curr.left);}
            if(curr.right!=null){_stack.push(curr.right);}
        }
        Collections.reverse(ans);
        return ans;
        
        
    }
}