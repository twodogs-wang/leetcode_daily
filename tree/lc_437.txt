You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
----------------------------------------------
class Solution:
    def pathSum(self, root: TreeNode, s: int) -> int:
        
        self.count = 0
        self.s = s
        return self.__findSumCount(root, {0:1}, 0)
    
    def __findSumCount(self, root, dic, currsum):
        if not root: 
            return 0
        currsum += root.val
        if currsum - self.s in dic: 
            self.count += dic[currsum - self.s]
        if currsum in dic: 
            dic[currsum] += 1
        else: 
            dic[currsum] = 1

        self.__findSumCount(root.left, dic, currsum)
        self.__findSumCount(root.right, dic, currsum)
        dic[currsum] -= 1 
        return self.count