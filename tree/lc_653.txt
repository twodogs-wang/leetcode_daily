Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
 

Example 2:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False
---------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean ans = false;
    public boolean findTarget(TreeNode root, int k) {
        if (root==null){return false;}
        HashMap<Integer, Integer> temp = new HashMap<>();
        helper(root, k, temp);
        return ans;
    }
    
    private void helper(TreeNode root, int target, HashMap<Integer,Integer> temp){
        if(root==null || ans){return;}
        int complement = target - root.val;
        if (temp.containsKey(complement)){ans=true;return;}
        temp.put(root.val, 1);
        helper(root.left, target, temp);
        helper(root.right, target, temp);
    }
}