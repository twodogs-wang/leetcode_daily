Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42
----------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __helper(self,root):
        if not root:
            return (float("-inf"), float("-inf"))
        left = self.__helper(root.left)
        right = self.__helper(root.right)
        one_kid = max(0, left[0], right[0]) + root.val
        two_kids = left[0] + right[0] + root.val
        curr_max = max(one_kid, two_kids, left[1], right[1])
        return (one_kid, curr_max)
        
    def maxPathSum(self, root: TreeNode) -> int:
        return self.__helper(root)[1]