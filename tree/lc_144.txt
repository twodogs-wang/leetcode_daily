Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?
-------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> ans = new ArrayList<Integer>();
    Stack<TreeNode> st = new Stack<TreeNode>(); 
    
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root==null){return ans;}
        while (root!=null || !st.empty()){
            while (root!=null){
                ans.add(root.val);
                st.push(root);
                root = root.left;
            }
            if (!st.empty()){
                root = st.pop();
                root = root.right;
            }
        }
    return ans;
    }
    
}