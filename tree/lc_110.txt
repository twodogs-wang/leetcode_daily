Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.
------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __helper(self, root):
        if not self.flag:
            return 0
        if not root:
            return 0
        l = self.__helper(root.left)
        r = self.__helper(root.right)
        if abs(l-r)>1:
            self.flag = False
        return max(l,r) + 1
    
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        self.flag = True
        self.__helper(root)
        return self.flag